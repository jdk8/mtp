// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: actor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_actor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_actor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_actor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_actor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_actor_2eproto;
class ActorMessage;
class ActorMessageDefaultTypeInternal;
extern ActorMessageDefaultTypeInternal _ActorMessage_default_instance_;
class InitClient;
class InitClientDefaultTypeInternal;
extern InitClientDefaultTypeInternal _InitClient_default_instance_;
class SerializableMail;
class SerializableMailDefaultTypeInternal;
extern SerializableMailDefaultTypeInternal _SerializableMail_default_instance_;
class ServiceAddr;
class ServiceAddrDefaultTypeInternal;
extern ServiceAddrDefaultTypeInternal _ServiceAddr_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ActorMessage* Arena::CreateMaybeMessage<::ActorMessage>(Arena*);
template<> ::InitClient* Arena::CreateMaybeMessage<::InitClient>(Arena*);
template<> ::SerializableMail* Arena::CreateMaybeMessage<::SerializableMail>(Arena*);
template<> ::ServiceAddr* Arena::CreateMaybeMessage<::ServiceAddr>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ActorMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActorMessage) */ {
 public:
  ActorMessage();
  virtual ~ActorMessage();

  ActorMessage(const ActorMessage& from);
  ActorMessage(ActorMessage&& from) noexcept
    : ActorMessage() {
    *this = ::std::move(from);
  }

  inline ActorMessage& operator=(const ActorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorMessage& operator=(ActorMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActorMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActorMessage* internal_default_instance() {
    return reinterpret_cast<const ActorMessage*>(
               &_ActorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ActorMessage* other);
  friend void swap(ActorMessage& a, ActorMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActorMessage* New() const final {
    return CreateMaybeMessage<ActorMessage>(nullptr);
  }

  ActorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActorMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActorMessage& from);
  void MergeFrom(const ActorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActorMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actor_2eproto);
    return ::descriptor_table_actor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes callee_addr = 1;
  void clear_callee_addr();
  static const int kCalleeAddrFieldNumber = 1;
  const std::string& callee_addr() const;
  void set_callee_addr(const std::string& value);
  void set_callee_addr(std::string&& value);
  void set_callee_addr(const char* value);
  void set_callee_addr(const void* value, size_t size);
  std::string* mutable_callee_addr();
  std::string* release_callee_addr();
  void set_allocated_callee_addr(std::string* callee_addr);

  // bytes method = 3;
  void clear_method();
  static const int kMethodFieldNumber = 3;
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const void* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);

  // bytes message = 4;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ActorMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callee_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actor_2eproto;
};
// -------------------------------------------------------------------

class SerializableMail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializableMail) */ {
 public:
  SerializableMail();
  virtual ~SerializableMail();

  SerializableMail(const SerializableMail& from);
  SerializableMail(SerializableMail&& from) noexcept
    : SerializableMail() {
    *this = ::std::move(from);
  }

  inline SerializableMail& operator=(const SerializableMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializableMail& operator=(SerializableMail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SerializableMail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SerializableMail* internal_default_instance() {
    return reinterpret_cast<const SerializableMail*>(
               &_SerializableMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SerializableMail* other);
  friend void swap(SerializableMail& a, SerializableMail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SerializableMail* New() const final {
    return CreateMaybeMessage<SerializableMail>(nullptr);
  }

  SerializableMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializableMail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SerializableMail& from);
  void MergeFrom(const SerializableMail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializableMail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializableMail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actor_2eproto);
    return ::descriptor_table_actor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // bytes actor_id = 4;
  void clear_actor_id();
  static const int kActorIdFieldNumber = 4;
  const std::string& actor_id() const;
  void set_actor_id(const std::string& value);
  void set_actor_id(std::string&& value);
  void set_actor_id(const char* value);
  void set_actor_id(const void* value, size_t size);
  std::string* mutable_actor_id();
  std::string* release_actor_id();
  void set_allocated_actor_id(std::string* actor_id);

  // bytes worker_id = 5;
  void clear_worker_id();
  static const int kWorkerIdFieldNumber = 5;
  const std::string& worker_id() const;
  void set_worker_id(const std::string& value);
  void set_worker_id(std::string&& value);
  void set_worker_id(const char* value);
  void set_worker_id(const void* value, size_t size);
  std::string* mutable_worker_id();
  std::string* release_worker_id();
  void set_allocated_worker_id(std::string* worker_id);

  // bool is_server = 1;
  void clear_is_server();
  static const int kIsServerFieldNumber = 1;
  bool is_server() const;
  void set_is_server(bool value);

  // int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 conn_fd = 6;
  void clear_conn_fd();
  static const int kConnFdFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 conn_fd() const;
  void set_conn_fd(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:SerializableMail)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_id_;
  bool is_server_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 conn_fd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actor_2eproto;
};
// -------------------------------------------------------------------

class ServiceAddr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceAddr) */ {
 public:
  ServiceAddr();
  virtual ~ServiceAddr();

  ServiceAddr(const ServiceAddr& from);
  ServiceAddr(ServiceAddr&& from) noexcept
    : ServiceAddr() {
    *this = ::std::move(from);
  }

  inline ServiceAddr& operator=(const ServiceAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceAddr& operator=(ServiceAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceAddr* internal_default_instance() {
    return reinterpret_cast<const ServiceAddr*>(
               &_ServiceAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ServiceAddr* other);
  friend void swap(ServiceAddr& a, ServiceAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceAddr* New() const final {
    return CreateMaybeMessage<ServiceAddr>(nullptr);
  }

  ServiceAddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceAddr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceAddr& from);
  void MergeFrom(const ServiceAddr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceAddr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceAddr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actor_2eproto);
    return ::descriptor_table_actor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes service_mails = 2;
  int service_mails_size() const;
  void clear_service_mails();
  static const int kServiceMailsFieldNumber = 2;
  const std::string& service_mails(int index) const;
  std::string* mutable_service_mails(int index);
  void set_service_mails(int index, const std::string& value);
  void set_service_mails(int index, std::string&& value);
  void set_service_mails(int index, const char* value);
  void set_service_mails(int index, const void* value, size_t size);
  std::string* add_service_mails();
  void add_service_mails(const std::string& value);
  void add_service_mails(std::string&& value);
  void add_service_mails(const char* value);
  void add_service_mails(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& service_mails() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_service_mails();

  // bytes service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const void* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);

  // @@protoc_insertion_point(class_scope:ServiceAddr)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> service_mails_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actor_2eproto;
};
// -------------------------------------------------------------------

class InitClient :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InitClient) */ {
 public:
  InitClient();
  virtual ~InitClient();

  InitClient(const InitClient& from);
  InitClient(InitClient&& from) noexcept
    : InitClient() {
    *this = ::std::move(from);
  }

  inline InitClient& operator=(const InitClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitClient& operator=(InitClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitClient* internal_default_instance() {
    return reinterpret_cast<const InitClient*>(
               &_InitClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(InitClient* other);
  friend void swap(InitClient& a, InitClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitClient* New() const final {
    return CreateMaybeMessage<InitClient>(nullptr);
  }

  InitClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitClient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitClient& from);
  void MergeFrom(const InitClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InitClient";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actor_2eproto);
    return ::descriptor_table_actor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes client_service = 2;
  void clear_client_service();
  static const int kClientServiceFieldNumber = 2;
  const std::string& client_service() const;
  void set_client_service(const std::string& value);
  void set_client_service(std::string&& value);
  void set_client_service(const char* value);
  void set_client_service(const void* value, size_t size);
  std::string* mutable_client_service();
  std::string* release_client_service();
  void set_allocated_client_service(std::string* client_service);

  // int32 conn_fd = 1;
  void clear_conn_fd();
  static const int kConnFdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 conn_fd() const;
  void set_conn_fd(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:InitClient)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_service_;
  ::PROTOBUF_NAMESPACE_ID::int32 conn_fd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actor_2eproto;
};
// ===================================================================

class ActorService_Stub;

class ActorService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ActorService() {};
 public:
  virtual ~ActorService();

  typedef ActorService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void SendActorMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ActorMessage* request,
                       ::ActorMessage* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ActorService);
};

class ActorService_Stub : public ActorService {
 public:
  ActorService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ActorService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ActorService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ActorService ------------------------------------------

  void SendActorMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ActorMessage* request,
                       ::ActorMessage* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ActorService_Stub);
};


// -------------------------------------------------------------------

class ActorClientService_Stub;

class ActorClientService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ActorClientService() {};
 public:
  virtual ~ActorClientService();

  typedef ActorClientService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void SendActorMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ActorMessage* request,
                       ::ActorMessage* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ActorClientService);
};

class ActorClientService_Stub : public ActorClientService {
 public:
  ActorClientService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ActorClientService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ActorClientService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ActorClientService ------------------------------------------

  void SendActorMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ActorMessage* request,
                       ::ActorMessage* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ActorClientService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActorMessage

// bytes callee_addr = 1;
inline void ActorMessage::clear_callee_addr() {
  callee_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActorMessage::callee_addr() const {
  // @@protoc_insertion_point(field_get:ActorMessage.callee_addr)
  return callee_addr_.GetNoArena();
}
inline void ActorMessage::set_callee_addr(const std::string& value) {
  
  callee_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ActorMessage.callee_addr)
}
inline void ActorMessage::set_callee_addr(std::string&& value) {
  
  callee_addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ActorMessage.callee_addr)
}
inline void ActorMessage::set_callee_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  callee_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ActorMessage.callee_addr)
}
inline void ActorMessage::set_callee_addr(const void* value, size_t size) {
  
  callee_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ActorMessage.callee_addr)
}
inline std::string* ActorMessage::mutable_callee_addr() {
  
  // @@protoc_insertion_point(field_mutable:ActorMessage.callee_addr)
  return callee_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActorMessage::release_callee_addr() {
  // @@protoc_insertion_point(field_release:ActorMessage.callee_addr)
  
  return callee_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActorMessage::set_allocated_callee_addr(std::string* callee_addr) {
  if (callee_addr != nullptr) {
    
  } else {
    
  }
  callee_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callee_addr);
  // @@protoc_insertion_point(field_set_allocated:ActorMessage.callee_addr)
}

// int32 type = 2;
inline void ActorMessage::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActorMessage::type() const {
  // @@protoc_insertion_point(field_get:ActorMessage.type)
  return type_;
}
inline void ActorMessage::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ActorMessage.type)
}

// bytes method = 3;
inline void ActorMessage::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActorMessage::method() const {
  // @@protoc_insertion_point(field_get:ActorMessage.method)
  return method_.GetNoArena();
}
inline void ActorMessage::set_method(const std::string& value) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ActorMessage.method)
}
inline void ActorMessage::set_method(std::string&& value) {
  
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ActorMessage.method)
}
inline void ActorMessage::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ActorMessage.method)
}
inline void ActorMessage::set_method(const void* value, size_t size) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ActorMessage.method)
}
inline std::string* ActorMessage::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:ActorMessage.method)
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActorMessage::release_method() {
  // @@protoc_insertion_point(field_release:ActorMessage.method)
  
  return method_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActorMessage::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:ActorMessage.method)
}

// bytes message = 4;
inline void ActorMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActorMessage::message() const {
  // @@protoc_insertion_point(field_get:ActorMessage.message)
  return message_.GetNoArena();
}
inline void ActorMessage::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ActorMessage.message)
}
inline void ActorMessage::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ActorMessage.message)
}
inline void ActorMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ActorMessage.message)
}
inline void ActorMessage::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ActorMessage.message)
}
inline std::string* ActorMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ActorMessage.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActorMessage::release_message() {
  // @@protoc_insertion_point(field_release:ActorMessage.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActorMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ActorMessage.message)
}

// -------------------------------------------------------------------

// SerializableMail

// bool is_server = 1;
inline void SerializableMail::clear_is_server() {
  is_server_ = false;
}
inline bool SerializableMail::is_server() const {
  // @@protoc_insertion_point(field_get:SerializableMail.is_server)
  return is_server_;
}
inline void SerializableMail::set_is_server(bool value) {
  
  is_server_ = value;
  // @@protoc_insertion_point(field_set:SerializableMail.is_server)
}

// bytes ip = 2;
inline void SerializableMail::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SerializableMail::ip() const {
  // @@protoc_insertion_point(field_get:SerializableMail.ip)
  return ip_.GetNoArena();
}
inline void SerializableMail::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SerializableMail.ip)
}
inline void SerializableMail::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SerializableMail.ip)
}
inline void SerializableMail::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SerializableMail.ip)
}
inline void SerializableMail::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SerializableMail.ip)
}
inline std::string* SerializableMail::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:SerializableMail.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SerializableMail::release_ip() {
  // @@protoc_insertion_point(field_release:SerializableMail.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SerializableMail::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:SerializableMail.ip)
}

// int32 port = 3;
inline void SerializableMail::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializableMail::port() const {
  // @@protoc_insertion_point(field_get:SerializableMail.port)
  return port_;
}
inline void SerializableMail::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:SerializableMail.port)
}

// bytes actor_id = 4;
inline void SerializableMail::clear_actor_id() {
  actor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SerializableMail::actor_id() const {
  // @@protoc_insertion_point(field_get:SerializableMail.actor_id)
  return actor_id_.GetNoArena();
}
inline void SerializableMail::set_actor_id(const std::string& value) {
  
  actor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SerializableMail.actor_id)
}
inline void SerializableMail::set_actor_id(std::string&& value) {
  
  actor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SerializableMail.actor_id)
}
inline void SerializableMail::set_actor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SerializableMail.actor_id)
}
inline void SerializableMail::set_actor_id(const void* value, size_t size) {
  
  actor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SerializableMail.actor_id)
}
inline std::string* SerializableMail::mutable_actor_id() {
  
  // @@protoc_insertion_point(field_mutable:SerializableMail.actor_id)
  return actor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SerializableMail::release_actor_id() {
  // @@protoc_insertion_point(field_release:SerializableMail.actor_id)
  
  return actor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SerializableMail::set_allocated_actor_id(std::string* actor_id) {
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_id);
  // @@protoc_insertion_point(field_set_allocated:SerializableMail.actor_id)
}

// bytes worker_id = 5;
inline void SerializableMail::clear_worker_id() {
  worker_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SerializableMail::worker_id() const {
  // @@protoc_insertion_point(field_get:SerializableMail.worker_id)
  return worker_id_.GetNoArena();
}
inline void SerializableMail::set_worker_id(const std::string& value) {
  
  worker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SerializableMail.worker_id)
}
inline void SerializableMail::set_worker_id(std::string&& value) {
  
  worker_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SerializableMail.worker_id)
}
inline void SerializableMail::set_worker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SerializableMail.worker_id)
}
inline void SerializableMail::set_worker_id(const void* value, size_t size) {
  
  worker_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SerializableMail.worker_id)
}
inline std::string* SerializableMail::mutable_worker_id() {
  
  // @@protoc_insertion_point(field_mutable:SerializableMail.worker_id)
  return worker_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SerializableMail::release_worker_id() {
  // @@protoc_insertion_point(field_release:SerializableMail.worker_id)
  
  return worker_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SerializableMail::set_allocated_worker_id(std::string* worker_id) {
  if (worker_id != nullptr) {
    
  } else {
    
  }
  worker_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_id);
  // @@protoc_insertion_point(field_set_allocated:SerializableMail.worker_id)
}

// int32 conn_fd = 6;
inline void SerializableMail::clear_conn_fd() {
  conn_fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializableMail::conn_fd() const {
  // @@protoc_insertion_point(field_get:SerializableMail.conn_fd)
  return conn_fd_;
}
inline void SerializableMail::set_conn_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conn_fd_ = value;
  // @@protoc_insertion_point(field_set:SerializableMail.conn_fd)
}

// -------------------------------------------------------------------

// ServiceAddr

// bytes service_name = 1;
inline void ServiceAddr::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceAddr::service_name() const {
  // @@protoc_insertion_point(field_get:ServiceAddr.service_name)
  return service_name_.GetNoArena();
}
inline void ServiceAddr::set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceAddr.service_name)
}
inline void ServiceAddr::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceAddr.service_name)
}
inline void ServiceAddr::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceAddr.service_name)
}
inline void ServiceAddr::set_service_name(const void* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceAddr.service_name)
}
inline std::string* ServiceAddr::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:ServiceAddr.service_name)
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceAddr::release_service_name() {
  // @@protoc_insertion_point(field_release:ServiceAddr.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAddr::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:ServiceAddr.service_name)
}

// repeated bytes service_mails = 2;
inline int ServiceAddr::service_mails_size() const {
  return service_mails_.size();
}
inline void ServiceAddr::clear_service_mails() {
  service_mails_.Clear();
}
inline const std::string& ServiceAddr::service_mails(int index) const {
  // @@protoc_insertion_point(field_get:ServiceAddr.service_mails)
  return service_mails_.Get(index);
}
inline std::string* ServiceAddr::mutable_service_mails(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceAddr.service_mails)
  return service_mails_.Mutable(index);
}
inline void ServiceAddr::set_service_mails(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ServiceAddr.service_mails)
  service_mails_.Mutable(index)->assign(value);
}
inline void ServiceAddr::set_service_mails(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ServiceAddr.service_mails)
  service_mails_.Mutable(index)->assign(std::move(value));
}
inline void ServiceAddr::set_service_mails(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_mails_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ServiceAddr.service_mails)
}
inline void ServiceAddr::set_service_mails(int index, const void* value, size_t size) {
  service_mails_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServiceAddr.service_mails)
}
inline std::string* ServiceAddr::add_service_mails() {
  // @@protoc_insertion_point(field_add_mutable:ServiceAddr.service_mails)
  return service_mails_.Add();
}
inline void ServiceAddr::add_service_mails(const std::string& value) {
  service_mails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ServiceAddr.service_mails)
}
inline void ServiceAddr::add_service_mails(std::string&& value) {
  service_mails_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ServiceAddr.service_mails)
}
inline void ServiceAddr::add_service_mails(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_mails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ServiceAddr.service_mails)
}
inline void ServiceAddr::add_service_mails(const void* value, size_t size) {
  service_mails_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ServiceAddr.service_mails)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServiceAddr::service_mails() const {
  // @@protoc_insertion_point(field_list:ServiceAddr.service_mails)
  return service_mails_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServiceAddr::mutable_service_mails() {
  // @@protoc_insertion_point(field_mutable_list:ServiceAddr.service_mails)
  return &service_mails_;
}

// -------------------------------------------------------------------

// InitClient

// int32 conn_fd = 1;
inline void InitClient::clear_conn_fd() {
  conn_fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InitClient::conn_fd() const {
  // @@protoc_insertion_point(field_get:InitClient.conn_fd)
  return conn_fd_;
}
inline void InitClient::set_conn_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conn_fd_ = value;
  // @@protoc_insertion_point(field_set:InitClient.conn_fd)
}

// bytes client_service = 2;
inline void InitClient::clear_client_service() {
  client_service_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InitClient::client_service() const {
  // @@protoc_insertion_point(field_get:InitClient.client_service)
  return client_service_.GetNoArena();
}
inline void InitClient::set_client_service(const std::string& value) {
  
  client_service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitClient.client_service)
}
inline void InitClient::set_client_service(std::string&& value) {
  
  client_service_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InitClient.client_service)
}
inline void InitClient::set_client_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitClient.client_service)
}
inline void InitClient::set_client_service(const void* value, size_t size) {
  
  client_service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitClient.client_service)
}
inline std::string* InitClient::mutable_client_service() {
  
  // @@protoc_insertion_point(field_mutable:InitClient.client_service)
  return client_service_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InitClient::release_client_service() {
  // @@protoc_insertion_point(field_release:InitClient.client_service)
  
  return client_service_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InitClient::set_allocated_client_service(std::string* client_service) {
  if (client_service != nullptr) {
    
  } else {
    
  }
  client_service_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_service);
  // @@protoc_insertion_point(field_set_allocated:InitClient.client_service)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_actor_2eproto
